}else{
for (k in seq_along(search_window_ind)) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = search_window_ind[k],
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
muod_indices[k, ] <- data_event_sim_map_muod(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdata[nb_pts, ])
}
}
muod_indices <- muod_indices/rep(matrixStats::colMaxs(muod_indices), each = lswi)
if(is.null(wts_muod)){
muod_indices <- rowMeans(muod_indices)
}else{
wts_muod <- wts_muod/sum(wts_muod)
muod_indices <- rowSums(muod_indices*rep(wts_muod, each = lswi))
}
best_k <- search_window_ind[which.min(muod_indices)]
best_distance <- min(muod_indices)
} else {
stop("Error: method unknown \n")
}
#cat("::--best candidate for location ", i, " is: ", best_k, "::\n")
# copy the value of the best candidate to simulation grid
simdata[i, ] <- tdata[best_k,]
counter <- counter + 1
cond_points <- c(cond_points,i)
#cat("::---found a candidate for location: ", i, "-:: \n")
}
return(simdata)
}
#### simulation ####
## run fmps simulation (to fill gaps in an SG using a TI),
## for different distances, no of neighbours, and no of conditioning data,
## and number of repetitions
run_simulation2 <- function(no_of_basis = 10,
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10)),
distance_metric = c("d1", "d2", "d3",
"d4"),
no_of_ngbs = c(20, 50, 100),
xlocs = round(seq(from = 0, to = 1, len = 51),2),
ylocs = round(seq(from = 0, to = 1, len = 51),2),
weighted = NULL,
wts_muod = NULL,
npoints_missing = 506,
missing_mode = c("box", "scattered"),
rep = 5){
missing_mode <- match.arg(missing_mode)
# simulate training image if it doesn't already exist
if(!file.exists("sim_intermediate_data/sgti.RData")){
ti <- simulate_functional_rf(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
# simulate test sim_grid
sg <- simulate_functional_rf(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
save(sg,ti, file = paste0("sim_intermediate_data/sgti.RData"))
} else{
load("sim_intermediate_data/sgti.RData")
}
# get indices of points to delete
if(missing_mode == "scattered"){
set.seed(5)
missing_indices <- sample.int(nrow(sg$sim_data), size = npoints_missing)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
}else{
testcond <- (sg$coord[,1] >= xlocs[1]) &
(sg$coord[,1] <= xlocs[23]) &
(sg$coord[,2] >= ylocs[1]) &
(sg$coord[,2] <= ylocs[23])
missing_indices <- which(testcond)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
}
results_list <- list()
for (di in distance_metric) {
for (nng in no_of_ngbs) {
for (i in 1:rep) {
cat("::-Nngbs: ", nng, "; dist: ",di, " rep: ",i, "-::\n")
simimage <- fun_mps2(simgrid = ti$coords,
tdata = ti$sim_data,
simdata = simdatares,
missing_points = missing_indices,
nnghbs = nng,
xseq = xlocs,
dist_metric = di,
weighted = weighted,
wts_muod = wts_muod)
intmlist <- list(no_neighbour = nng,
distmetric = di,
simmimage = simimage,
rep = i)
results_list[[length(results_list)+1]] <- intmlist
# save(results_list,
#      file = paste0("sim_intm_data/results_list_",
#                    "_dist_", di,
#                    "_nng_", nng,
#                    "_missing_", missing_mode,
#                    ".RData"))
}
}
}
final_res <- list(training = ti,
simtest = sg,
missing_points = missing_indices,
results = results_list)
save(final_res, file = paste0("sim_final_results/final_res_",
"_dist_", distance_metric,
"_nng_", no_of_ngbs,
"_missing_", missing_mode,
".RData"))
return(final_res)
}
# for inner filling order
fill_along_y <- function(prev_data){
new_data <- prev_data[-1,]
new_data$V2 <- new_data$V1
new_data$V1 <- prev_data$V2[-1]
return(new_data)
}
fill_along_x <- function(prev_data){
new_data <- prev_data
new_data$V1 <- new_data$V2
new_data$V2 <- new_data$V2[1]
return(new_data)
}
## run fmps simulation (to fill gaps in an SG using a TI, but with inner_outward_filling),
## for different distances, no of neighbours, and no of conditioning data,
## and number of repetitions
run_simulation3 <- function(no_of_basis = 10,
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10)),
distance_metric = c("d1", "d2", "d3",
"d4", ),
no_of_ngbs = c(20, 50, 100),
xlocs = round(seq(from = 0, to = 1, len = 51),2),
ylocs = round(seq(from = 0, to = 1, len = 51),2),
weighted = NULL,
wts_muod = NULL,
npoints_missing = 506,
inner_outward = T,
missing_mode = c("scattered", "box"),
rep = 5){
missing_mode <- match.arg(missing_mode)
# simulate training image
if(!file.exists("sim_intermediate_data/sgti.RData")){
ti <- sim_image2(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
# simulate test sim_grid
sg <- sim_image2(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
save(sg,ti, file = paste0("sim_intermediate_data/sgti.RData"))
} else{
load("sim_intermediate_data/sgti.RData")
}
# get indices of points to delete
if(missing_mode == "scattered"){
set.seed(5)
missing_indices <- sample.int(nrow(sg$sim_data), size = npoints_missing)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
}else{
testcond <- (sg$coord[,1] >= xlocs[1]) &
(sg$coord[,1] <= xlocs[23]) &
(sg$coord[,2] >= ylocs[1]) &
(sg$coord[,2] <= ylocs[23])
missing_indices <- which(testcond)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
}
# reorder missing points for inner-outward filling
if(inner_outward){
# prep initial data
ttdt <- as.data.frame(sg$coords[missing_indices, ])
ds1 <- ttdt[with(ttdt, order(V2, V1, decreasing = T)),]
ds1 <- ds1[1:which(ds1$V1 == 0)[1],]
track_data <-comb_data <- ds1
# rearrange coords inner to outward
while (nrow(track_data)>1) {
latest_data <- fill_along_y(track_data)
track_data <- fill_along_x(latest_data)
comb_data <- rbind(comb_data, latest_data, track_data)
cat("::current row number is", nrow(track_data), "\n")
}
# convert comb_data to indices in original indices
arranged_indices <- rep(0,nrow(ttdt))
for(i in 1:nrow(comb_data)){
crow <- matrix(rep(unlist(comb_data[i, ]), nrow(ttdt)), byrow = T, nc = 2)
arranged_indices[i] <-  which(rowSums(ttdt == crow) == 2)
}
missing_indices <- arranged_indices
}
# save(missing_indices, file = paste0("sim_intm_data/gap",
#                                     "_missing_", missing_mode,
#                                     "_dist_", distance_metric,
#                                     "_nng_", no_of_ngbs,
#                                     ".RData"))
results_list <- list()
for (di in distance_metric) {
for (nng in no_of_ngbs) {
for (i in 1:rep) {
cat("::-Nngbs: ", nng, "; dist: ",di, " rep: ",i, "-::\n")
simimage <- fun_mps2(simgrid = ti$coords,
tdata = ti$sim_data,
simdata = simdatares,
missing_points = missing_indices,
nnghbs = nng,
xseq = xlocs,
dist_metric = di,
weighted = weighted,
wts_muod = wts_muod)
intmlist <- list(no_neighbour = nng,
distmetric = di,
simmimage = simimage,
rep = i)
results_list[[length(results_list)+1]] <- intmlist
# save(results_list,
#      file = paste0("sim_intm_data/results_list_",
#                    "_dist_", di,
#                    "_nng_", nng,
#                    "_missing_", missing_mode,
#                    ".RData"))
}
}
}
final_res <- list(training = ti,
simtest = sg,
missing_points = missing_indices,
results = results_list)
save(final_res, file = paste0("sim_final_results/final_res_",
"_dist_", distance_metric,
"_nng_", no_of_ngbs,
"_missing_", missing_mode,
"inner_outward",
".RData"))
return(final_res)
}
tt_5 <- run_simulation3(distance_metric = "d1",
no_of_ngbs = 5,
rep = 4,
missing_mode = "box")
tt_5 <- run_simulation3(distance_metric = "d3",
no_of_ngbs = 5,
rep = 1,
missing_mode = "box")
## run fmps simulation (to fill gaps in an SG using a TI, but with inner_outward_filling),
## for different distances, no of neighbours, and no of conditioning data,
## and number of repetitions
run_simulation3 <- function(no_of_basis = 10,
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10)),
distance_metric = c("d1", "d2", "d3",
"d4"),
no_of_ngbs = c(20, 50, 100),
xlocs = round(seq(from = 0, to = 1, len = 51),2),
ylocs = round(seq(from = 0, to = 1, len = 51),2),
weighted = NULL,
wts_muod = NULL,
npoints_missing = 506,
inner_outward = T,
missing_mode = c("box", "scattered"),
rep = 5){
missing_mode <- match.arg(missing_mode)
# simulate training image
if(!file.exists("sim_intermediate_data/sgti.RData")){
ti <- sim_image2(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
# simulate test sim_grid
sg <- sim_image2(xseq = xlocs,
yseq = ylocs,
nobasis = no_of_basis,
field_params = field_params)
save(sg,ti, file = paste0("sim_intermediate_data/sgti.RData"))
} else{
load("sim_intermediate_data/sgti.RData")
}
# get indices of points to delete
if(missing_mode == "scattered"){
set.seed(5)
missing_indices <- sample.int(nrow(sg$sim_data), size = npoints_missing)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
}else{
testcond <- (sg$coord[,1] >= xlocs[1]) &
(sg$coord[,1] <= xlocs[23]) &
(sg$coord[,2] >= ylocs[1]) &
(sg$coord[,2] <= ylocs[23])
missing_indices <- which(testcond)
simdatares <- sg$sim_data
simdatares[missing_indices, ] <- NA
if(inner_outward){
# prep initial data
ttdt <- as.data.frame(sg$coords[missing_indices, ])
ds1 <- ttdt[with(ttdt, order(V2, V1, decreasing = T)),]
ds1 <- ds1[1:which(ds1$V1 == 0)[1],]
track_data <-comb_data <- ds1
# rearrange coords inner to outward
while (nrow(track_data)>1) {
latest_data <- fill_along_y(track_data)
track_data <- fill_along_x(latest_data)
comb_data <- rbind(comb_data, latest_data, track_data)
cat("::current row number is", nrow(track_data), "\n")
}
# convert comb_data to indices in original indices
arranged_indices <- rep(0,nrow(ttdt))
for(i in 1:nrow(comb_data)){
crow <- matrix(rep(unlist(comb_data[i, ]), nrow(ttdt)), byrow = T, nc = 2)
arranged_indices[i] <-  which(rowSums(ttdt == crow) == 2)
}
missing_indices <- missing_indices[arranged_indices]
}
}
# reorder missing points for inner-outward filling
# save(missing_indices, file = paste0("sim_intm_data/gap",
#                                     "_missing_", missing_mode,
#                                     "_dist_", distance_metric,
#                                     "_nng_", no_of_ngbs,
#                                     ".RData"))
results_list <- list()
for (di in distance_metric) {
for (nng in no_of_ngbs) {
for (i in 1:rep) {
cat("::-Nngbs: ", nng, "; dist: ",di, " rep: ",i, "-::\n")
simimage <- fun_mps3(simgrid = ti$coords,
tdata = ti$sim_data,
simdata = simdatares,
missing_points = missing_indices,
nnghbs = nng,
xseq = xlocs,
dist_metric = di,
weighted = weighted,
wts_muod = wts_muod)
intmlist <- list(no_neighbour = nng,
distmetric = di,
simmimage = simimage,
rep = i)
results_list[[length(results_list)+1]] <- intmlist
# save(results_list,
#      file = paste0("sim_intm_data/results_list_",
#                    "_dist_", di,
#                    "_nng_", nng,
#                    "_missing_", missing_mode,
#                    ".RData"))
}
}
}
final_res <- list(training = ti,
simtest = sg,
missing_points = missing_indices,
results = results_list)
save(final_res, file = paste0("sim_final_results/final_res_",
"_dist_", distance_metric,
"_nng_", no_of_ngbs,
"_missing_", missing_mode,
"inner_outward",
".RData"))
return(final_res)
}
tt_5 <- run_simulation3(distance_metric = "d1",
no_of_ngbs = 5,
rep = 4,
missing_mode = "box")
tt_5 <- run_simulation3(distance_metric = "d3",
no_of_ngbs = 5,
rep = 1,
missing_mode = "box")
load("sim_final_results/final_res__dist_d3_nng_5_missing_boxinner_outward.RData")
norm_test_image_missing <- norm_test_image
norm_test_image_missing <- norm_test_image
norm_test_image_missing <- norm_test_image
load("sim_intermediate_data/sgti.RData")
# inner outward filling
load("sim_final_results/final_res__dist_d3_nng_5_missing_box_inner_outward.RData")
load("sim_intermediate_data/sgti.RData")
norm_training_image <- sqrt(rowSums(final_res$training$sim_data^2))
norm_test_image <- sqrt(rowSums(final_res$simtest$sim_data^2))
norm_test_image_missing <- norm_test_image
norm_test_image_missing[final_res$missing_points]  <- NA
norm_sg_d3_inner <- list()
for (i in 1:4) {
norm_sg_d3_inner[[i]] <- sqrt(rowSums(final_res$results[[i]]$simmimage^2))
}
pdf("sim_d3_gap_box_inner_outward_filling.pdf", width = 9.5, height = 7)
plot_rf_gap2(norm_train = norm_training_image,
norm_testim_missing = norm_test_image_missing,
norm_simg = norm_sg_d3_inner)
final_res$results[1]
str(final_res$results[1])
str(final_res$results)
str(final_res$results[[1]])
str(final_res$results[[2]])
str(final_res$results[[1]])
norm_sg_d3_inner <- list()
for (i in 1:4) {
norm_sg_d3_inner[[i]] <- sqrt(rowSums(final_res$results[1][[i]]$simmimage^2))
}
str(final_res$results)
# inner outward filling
load("sim_final_results/final_res__dist_d1_nng_5_missing_box_inner_outward.RData")
load("sim_intermediate_data/sgti.RData")
norm_training_image <- sqrt(rowSums(final_res$training$sim_data^2))
norm_test_image <- sqrt(rowSums(final_res$simtest$sim_data^2))
norm_test_image_missing <- norm_test_image
norm_test_image_missing[final_res$missing_points]  <- NA
norm_sg_d1_inner <- list()
for (i in 1:4) {
norm_sg_d1_inner[[i]] <- sqrt(rowSums(final_res$results[1][[i]]$simmimage^2))
}
norm_sg_d1_inner <- list()
for (i in 1:4) {
norm_sg_d1_inner[[i]] <- sqrt(rowSums(final_res$results[[i]]$simmimage^2))
}
pdf("sim_d1_gap_box_inner_outward_filling.pdf", width = 9.5, height = 7)
plot_rf_gap2(norm_train = norm_training_image,
norm_testim_missing = norm_test_image_missing,
norm_simg = norm_sg_d3_inner)
plot_rf_gap2 <- function(norm_train, norm_testim_missing, norm_simg){
plotdttt1 <- data.frame(x = rep(ti$coords[,1], 6),
y = rep(ti$coords[,2], 6),
z =  c(norm_train,
norm_testim_missing,
unlist(norm_simg)),
field = factor(rep(c("training_image",
"test_image_gap",
paste0("simulation", 1:4) ),
each = 2601 ),
levels = c("training_image",
"test_image_gap",
paste0("simulation", 1:4) )))
ggplot(plotdttt1, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = 2, ncol = 3)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
#limits = c(-4.5, 4.5),
#breaks = c(-4,-3, -2, -1, 0, 1, 2, 3,4),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
}
pdf("sim_d1_gap_box_inner_outward_filling.pdf", width = 9.5, height = 7)
plot_rf_gap2(norm_train = norm_training_image,
norm_testim_missing = norm_test_image_missing,
norm_simg = norm_sg_d3_inner)
dev.off()
# inner outward filling
load("sim_final_results/final_res__dist_d1_nng_5_missing_box_inner_outward.RData")
load("sim_intermediate_data/sgti.RData")
norm_training_image <- sqrt(rowSums(final_res$training$sim_data^2))
norm_test_image <- sqrt(rowSums(final_res$simtest$sim_data^2))
norm_test_image_missing <- norm_test_image
norm_test_image_missing[final_res$missing_points]  <- NA
norm_sg_d1_inner <- list()
for (i in 1:4) {
norm_sg_d1_inner[[i]] <- sqrt(rowSums(final_res$results[[i]]$simmimage^2))
}
pdf("sim_d1_gap_box_inner_outward_filling.pdf", width = 9.5, height = 7)
plot_rf_gap2(norm_train = norm_training_image,
norm_testim_missing = norm_test_image_missing,
norm_simg = norm_sg_d1_inner)
plot_rf_gap2 <- function(norm_train, norm_testim_missing, norm_simg){
plotdttt1 <- data.frame(x = rep(ti$coords[,1], 6),
y = rep(ti$coords[,2], 6),
z =  c(norm_train,
norm_testim_missing,
unlist(norm_simg)),
field = factor(rep(c("training_image",
"test_image_gap",
paste0("simulation", 1:4) ),
each = 2601 ),
levels = c("training_image",
"test_image_gap",
paste0("simulation", 1:4) )))
ggplot(plotdttt1, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = 2, ncol = 3)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
#limits = c(-4.5, 4.5),
#breaks = c(-4,-3, -2, -1, 0, 1, 2, 3,4),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
}
pdf("sim_d1_gap_box_inner_outward_filling.pdf", width = 9.5, height = 7)
plot_rf_gap2(norm_train = norm_training_image,
norm_testim_missing = norm_test_image_missing,
norm_simg = norm_sg_d1_inner)
dev.off()
