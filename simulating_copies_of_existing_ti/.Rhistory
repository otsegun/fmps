cdiff <- xseq[2]-xseq[1]
len_out <- length(xseq)
dm <- dim(tdata);
nr <- dm[1];
nc <- dm[2]
simdatares <- matrix(NA, nrow = nr, ncol = nc)
if(missing(ncond)){ # unconditional simulation
} else{ # conditional simulation
cond_points <- sample.int(nr, size = ncond)
simdatares[cond_points, ] <- simdata[cond_points, ]
}
# define random path across simulation grid
rowss <- 1:nr
simpoints <- rowss[!(rowss %in%  cond_points)]
if(length(simpoints) > 1){
simpoints <- sample(simpoints) # shuffle simpoint
}
lsmp <- length(simpoints)
#find dmax if distance is d2
if(dist_metric == "d2"){
tdata_norm <- sqrt(rowSums(tdata^2))
tnorm_max <- which.max(tdata_norm)
tnorm_min <- which.min(tdata_norm)
dmax <- sqrt(sum((tdata[tnorm_max,] - tdata[tnorm_min,])^2))
}
# start simulation
counter <- 1
for (i in simpoints) {
cat("::---Candidate ", counter, "out of ", lsmp, "for location", i, "-::", "\n")
coords_i <- simgrid[i, ]
lcond <- length(cond_points)
# check if conditioning points is less nngbs
if(lcond < nnghbs){
nnghbs_new <- lcond
}else{
nnghbs_new <- nnghbs
}
# find n nearest neighbours to point i
coords_cond_points <- simgrid[cond_points, ]
dist_i_cond_points <- apply(coords_cond_points, 1, euc.dist, x2 = coords_i)
sorted_dists <- sort(dist_i_cond_points, index.return = T)
ind_nb_pts <- sorted_dists$ix[1:nnghbs_new] #
nb_pts <-   cond_points[ind_nb_pts]
nb_pts_coords <- simgrid[nb_pts, ]
# define search window in TI
lag_vectors <- nb_pts_coords - rep(coords_i, each = nnghbs_new)
if(isTRUE(weighted)) lag_vector_norms <- sqrt(rowSums(lag_vectors^2))
xy_max_limit <- round(max(xseq) - matrixStats::colMaxs(lag_vectors), 2)
xy_min_limit <- round(min(xseq) - matrixStats::colMins(lag_vectors),2)
test_cond <- (simgrid[, 1] <= xy_max_limit[1]) & # problem of rounding
(simgrid[, 1] >= xy_min_limit[1]) &
(simgrid[, 2] <= xy_max_limit[2]) &
(simgrid[, 2] >= xy_min_limit[2])
search_window_ind <- which(test_cond) # indexes simgrid
lswi <- length(search_window_ind)
if(lswi > 1){ # sampling behaves differently when it receives an integer
search_window_ind <- sample(search_window_ind) # shuffle it
}
best_k <- search_window_ind[1]
best_distance <- 1E10
if (dist_metric == "d1"){
for (k in search_window_ind) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = k,
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
if(isTRUE(weighted)){
dist_data_events <- data_event_dist1(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
wts = 1/lag_vector_norms)
}else{
dist_data_events <- data_event_dist1(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
wts = NULL)
}
if (dist_data_events < best_distance) {
best_k <- k
best_distance <- dist_data_events
}
}
} else if(dist_metric == "d3"){
for (k in search_window_ind) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = k,
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
if(isTRUE(weighted)){
dist_data_events <- data_event_dist_deriv(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
wts = 1/lag_vector_norms,
deriv_order = 1)
}else{
dist_data_events <- data_event_dist_deriv(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
wts = NULL,
deriv_order = 1)
}
if (dist_data_events < best_distance) {
best_k <- k
best_distance <- dist_data_events
}
}
} else if (dist_metric == "d2"){
for (k in search_window_ind) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = k,
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
dist_data_events <- data_event_dist2(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
dmax = dmax)
if (dist_data_events < best_distance) {
best_k <- k
best_distance <- dist_data_events
}
}
} else if (dist_metric == "d4"){
muod_indices <- matrix(nrow = lswi, ncol = 3)
if(isTRUE(weighted)){
for (k in seq_along(search_window_ind)) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = search_window_ind[k],
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
muod_indices[k, ] <- data_event_sim_map_muod(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ],
wts = 1/lag_vector_norms)
}
}else{
for (k in seq_along(search_window_ind)) {
candidate_ngbs_ind <- find_cand_ngbs_inds(simgridd = simgrid,
candptind = search_window_ind[k],
lagvectors = lag_vectors,
ccdiff = cdiff,
lenout = len_out)
muod_indices[k, ] <- data_event_sim_map_muod(cand_fdata = tdata[candidate_ngbs_ind, ],
pfdata = simdatares[nb_pts, ])
}
}
muod_indices <- muod_indices/rep(matrixStats::colMaxs(muod_indices), each = lswi)
if(is.null(wts_muod)){
muod_indices <- rowMeans(muod_indices)
}else{
wts_muod <- wts_muod/sum(wts_muod)
muod_indices <- rowSums(muod_indices*rep(wts_muod, each = lswi))
}
best_k <- search_window_ind[which.min(muod_indices)]
best_distance <- min(muod_indices)
} else {
stop("Error: method unknown \n")
}
#cat("::--best candidate for location ", i, " is: ", best_k, "::\n")
# copy the value of the best candidate to simulation grid
simdatares[i, ] <- tdata[best_k,]
counter <- counter + 1
cond_points <- c(cond_points,i)
#cat("::---found a candidate for location: ", i, "-:: \n")
}
return(simdatares)
}
##### plotting helper functions ####
plot_fields_image <- function(spatial_fn_field, nr = 2, nc = 5){
nbasis <- length(spatial_fn_field$rndfields)
dtplot2 <- data.frame(x = rep(spatial_fn_field$coords[,1], times = nbasis),
y = rep(spatial_fn_field$coords[,2], times = nbasis),
z = unlist(spatial_fn_field$rndfields),
field = factor(paste0("field",
rep(1:nbasis, each = nrow(ti$coords))),
levels = paste0("field",1:nbasis)))
p2 <- ggplot(dtplot2, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = nr, ncol = nc)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = c(-4.5, 4.5),
breaks = c(-4,-3, -2, -1, 0, 1, 2, 3,4),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
p2
}
plot_field <- function(x, y, z ){
dtplot <- data.frame(x = x, y = y, z = z)
p1 <- ggplot(dtplot, aes(x = x, y = y, fill = z)) +
geom_raster() +
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = c(-4, 4),
breaks = c(-3, -2, -1, 0, 1, 2, 3),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
p1
}
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10))
xlocs = round(seq(from = 0, to = 1, len = 51),2)
ylocs = xlocs
ti <- simulate_functional_rf(xseq = xlocs,
yseq = ylocs,
nobasis = 10,
field_params = field_params)
setwd("/media/segun/cervantes/Research/Mobile_Research/KAUST_research/KAUST_NEW/New_Experiments1/simulation_lower_ngbh_cond_data/simulation_codes")
# simulate another functional rf from which to choose
# initial conditioning data
sg <- simulate_functional_rf(xseq = xlocs,
yseq = ylocs,
nobasis = 10,
field_params = field_params)
# save both in intermediate data folder for later use
save(sg,ti, file = paste0("sim_intermediate_data/sgti_bw.RData"))
run_simulation <- function(no_of_basis = 10,
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10)),
distance_metric = c("d1", "d2", "d1_deriv", "dmuod"),
conditioning_data = c(10L, 20L, 50L),
no_of_ngbs = c(5L, 10L, 20L),
xlocs = round(seq(from = 0, to = 1, len = 51),2),
ylocs = round(seq(from = 0, to = 1, len = 51),2),
weighted = NULL,
wts_muod = NULL,
rep = 5){
# load training image and inicial conditioning data image
load("sim_intermediate_data/sgti_bw.RData")
# ti <- sim_image2(xseq = xlocs,
#                  yseq = ylocs,
#                  nobasis = no_of_basis,
#                  field_params = field_params)
# #plot_fields_image(ti)
#
# # simulate test sim_grid
# sg <- sim_image2(xseq = xlocs,
#                  yseq = ylocs,
#                  nobasis = no_of_basis,
#                  field_params = field_params)
# #plot_fields_image(sg)
# save(sg,ti, file = paste0("sim_intm_data/sgti.RData"))
results_list <- list()
for (di in distance_metric) {
for (nco in conditioning_data) {
for (nng in no_of_ngbs) {
if(nng >= nco){
next
}
for (i in 1:rep) {
cat("::-Ncond: ", nco, "; nngbs: ", nng, "; dist: ",di, " rep: ",i, "-::\n")
simimage <- fun_mps(simgrid = ti$coords,
tdata = ti$sim_data,
simdata = sg$sim_data,
ncond = nco,
nnghbs = nng,
xseq = xlocs,
dist_metric = di,
weighted = weighted,
wts_muod = wts_muod)
intmlist <- list(no_neighbour = nng,
no_cond = nco,
distmetric = di,
simmimage = simimage,
rep = i)
results_list[[length(results_list)+1]] <- intmlist
save(results_list,
file = paste0("sim_intermediate_data/results_list_",
"dist_", di,
"_ncond_", nco,
"_nng_", nng,
".RData"))
}
}
}
}
final_res <- list(training = ti,
simtest = sg,
results = results_list)
save(final_res, file = paste0("sim_final_results//final_res_",
"dist_", distance_metric,
"_ncond_", conditioning_data,
"_nng_", no_of_ngbs,
".RData"))
return(final_res)
}
run_simulation <- function(no_of_basis = 10,
field_params = list(sigma = rep(1, 10),
beta = rep(.063, 10),
nu =   rep(1.5, 10)),
distance_metric = c("d1", "d2", "d1_deriv", "dmuod"),
conditioning_data = c(10L, 20L, 50L),
no_of_ngbs = c(5L, 10L, 20L),
xlocs = round(seq(from = 0, to = 1, len = 51),2),
ylocs = round(seq(from = 0, to = 1, len = 51),2),
weighted = NULL,
wts_muod = NULL,
rep = 5){
# load training image and inicial conditioning data image
load("sim_intermediate_data/sgti_bw.RData")
# ti <- sim_image2(xseq = xlocs,
#                  yseq = ylocs,
#                  nobasis = no_of_basis,
#                  field_params = field_params)
# #plot_fields_image(ti)
#
# # simulate test sim_grid
# sg <- sim_image2(xseq = xlocs,
#                  yseq = ylocs,
#                  nobasis = no_of_basis,
#                  field_params = field_params)
# #plot_fields_image(sg)
# save(sg,ti, file = paste0("sim_intm_data/sgti.RData"))
results_list <- list()
for (di in distance_metric) {
for (nco in conditioning_data) {
for (nng in no_of_ngbs) {
if(nng >= nco){
next
}
for (i in 1:rep) {
cat("::-Ncond: ", nco, "; nngbs: ", nng, "; dist: ",di, " rep: ",i, "-::\n")
simimage <- fun_mps(simgrid = ti$coords,
tdata = ti$sim_data,
simdata = sg$sim_data,
ncond = nco,
nnghbs = nng,
xseq = xlocs,
dist_metric = di,
weighted = weighted,
wts_muod = wts_muod)
intmlist <- list(no_neighbour = nng,
no_cond = nco,
distmetric = di,
simmimage = simimage,
rep = i)
results_list[[length(results_list)+1]] <- intmlist
save(results_list,
file = paste0("sim_intermediate_data/results_list_",
"dist_", di,
"_ncond_", nco,
"_nng_", nng,
".RData"))
}
}
}
}
final_res <- list(training = ti,
simtest = sg,
results = results_list)
save(final_res, file = paste0("sim_final_results//final_res_",
"dist_", distance_metric,
"_ncond_", conditioning_data,
"_nng_", no_of_ngbs,
".RData"))
return(final_res)
}
tt_10_5 <- run_simulation(distance_metric = "d1",
conditioning_data = 10,
no_of_ngbs = 5,
rep = 4)
#### Example Plotting of results ####
# load training grid (ti) and initial conditioning data grid (sg)
load("sim_intermediate_data/sgti_bw.RData")
# load a result
load("sim_final_results/final_res_dist_d1_ncond_10_nng_5.RData")
plot_fields_image <- function(spatial_fn_field, nr = 2, nc = 5){
nbasis <- length(spatial_fn_field$rndfields)
dtplot2 <- data.frame(x = rep(spatial_fn_field$coords[,1], times = nbasis),
y = rep(spatial_fn_field$coords[,2], times = nbasis),
z = unlist(spatial_fn_field$rndfields),
field = factor(paste0("field",
rep(1:nbasis, each = nrow(ti$coords))),
levels = paste0("field",1:nbasis)))
p2 <- ggplot(dtplot2, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = nr, ncol = nc)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = c(-4.5, 4.5),
breaks = c(-4,-3, -2, -1, 0, 1, 2, 3,4),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
p2
}
plot_fields_image(sg)
# plot rfs used for ti
plot_fields_image(ti)
plot_rfs <- function(norm_simg, color_limits, nreps){
plotdttt1 <- data.frame(x = rep(final_res$training$coords[,1], nreps),
y = rep(final_res$training$coords[,2], nreps),
z =  unlist(norm_simg),
field = factor(rep(paste0("Functional_RF", 1:nreps), each = 2601),
levels =  paste0("Functional_RF", 1:nreps) ))
ggplot(plotdttt1, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = color_limits,
breaks = c(5,10, 15, 20),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
}
nreps <- 4 # from the number of reps conducted in simulation
norm_training_image <- sqrt(rowSums(final_res$training$sim_data^2))
norm_cond_image <- sqrt(rowSums(final_res$simtest$sim_data^2))
norm_sg_d1 <- list()
for (i in 1:nreps) {
norm_sg_d1[[i]] <- sqrt(rowSums(final_res$results[[i]]$simmimage^2))
}
lims <- c(min(min(norm_training_image), min(norm_cond_image)),
max(max(norm_training_image), max(norm_cond_image)))
plot_rfs(norm_simg = norm_sg_d1, color_limits = lims, nreps = nreps)
plot_rfs1 <- function(norm_train, norm_cimage, norm_simg){
plotdttt1 <- data.frame(x = rep(ti$coords[,1], 6),
y = rep(ti$coords[,2], 6),
z =  c(norm_train,
norm_cimage,
unlist(norm_simg)),
field = factor(rep(c("training_image",
"conditioning_data",
paste0("Functional_RF", 1:4) ),
each = 2601 ),
levels = c("conditioning_data",
"training_image",
paste0("Functional_RF", 1:4) )))
ggplot(plotdttt1, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = 2, ncol = 3)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = c(min(min(norm_train), min(norm_cimage)),
max(max(norm_train), max(norm_cimage))),
breaks = c(5,10, 15, 20),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
}
# used to plot training + cond_data
plot_rf_tr_ci <- function(norm_train, norm_cimage){
plotdt <- data.frame(x = rep(final_res$training$coords[,1], 2),
y = rep(final_res$training$coords[,2], 2),
z =  c(norm_train, norm_cimage),
field = factor(rep(c("training_image", "conditioning_data"), each = 2601)))
ggplot(plotdt, aes(x = x, y = y, fill = z)) +
geom_raster() +
facet_wrap(~field, nrow = 1, ncol = 2)+
scale_fill_viridis(discrete = FALSE,
option = "turbo",
limits = c(min(min(norm_train), min(norm_cimage)),
max(max(norm_train), max(norm_cimage))),
breaks = c(5,10, 15, 20),
guide = guide_colorbar(label.position = "left",
label.hjust = 1,
barwidth = 0.5,
barheight = 10,
draw.ulim = T,
draw.llim = T)) +
theme_bw()
}
# plot of the two rfs: conditiong data and training image
plot_rf_tr_ci(norm_train = norm_training_image, norm_cimage = norm_cond_image)
plot_rfs1(norm_simg = norm_sg_d1,
norm_train = norm_training_image,
norm_cimage = norm_cond_image)
pdf("training_conditioning1.pdf", width = 9, height = 4.5)
plot_rf_tr_ci(norm_train = norm_training_image, norm_cimage = norm_cond_image)
dev.off()
# plots of simulated rfs for d1 + conditioning and training image data
pdf("sim_new_copy_d1_cond_tr.pdf", width = 9.5, height = 6)
plot_rfs1(norm_simg = norm_sg_d1,
norm_train = norm_training_image,
norm_cimage = norm_cond_image)
dev.off()
knitr::opts_chunk$set(echo = F, fig.align = "center")
#library(fda)
library(ggplot2)
library(tidyr)
library(viridis)
difference_curves <- function(dt){
p <- dim(dt)[2]
dt[,2:p] - dt[, 1:(p-1)]
}
plot_rfs(norm_simg = norm_sg_d1, color_limits = lims)
plot_rfs(norm_simg = norm_sg_d1, color_limits = lims, nreps = nreps)
pdf("sim_new_copy_d1.pdf", width = 9.5, height = 9)
plot_rfs(norm_simg = norm_sg_d1, color_limits = lims, nreps = nreps)
dev.off()
